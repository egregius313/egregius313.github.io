#+TITLE: 2021 Day 9

* Part 1: Low Points

#+begin_example
2199943210
3987894921
9856789892
8767896789
9899965678
#+end_example

#+begin_quote
Your first goal is to find the low points - the locations that are lower than
any of its adjacent locations. Most locations have four adjacent locations (up,
down, left, and right); locations on the edge or corner of the map have three or
two adjacent locations, respectively. (Diagonal locations do not count as
adjacent.)

In the above example, there are four low points, all highlighted: two are in the
first row (a 1 and a 0), one is in the third row (a 5), and one is in the bottom
row (also a 5). All other locations on the heightmap have some lower adjacent
location, and so are not low points.

The risk level of a low point is 1 plus its height. In the above example, the
risk levels of the low points are 2, 1, 6, and 6. The sum of the risk levels of
all low points in the heightmap is therefore 15.

Find all of the low points on your heightmap. What is the sum of the risk levels
of all low points on your heightmap?
#+end_quote

* Part 2: Basins

#+begin_quote
A basin is all locations that eventually flow downward to a single low point.
Therefore, every low point has a basin, although some basins are very small.
Locations of height 9 do not count as being in any basin, and all other
locations will always be part of exactly one basin.

The size of a basin is the number of locations within the basin, including the
low point.
#+end_quote


In order to solve the basin problem, we need a way to model what basin a given
point is in. Since the goal is to find the size of each basin (determined by the
number of points in each basin), we can reduce this problem to a
union-find/merge-find problem. In order to do this, I use the [[https://en.wikipedia.org/wiki/Disjoint-set_data_structure][Disjoint Sets data
structure]] commonly used in merge-find problems. A disjoint sets data structure
provides the following main operations:

#+begin_src nim
func root(parent: DisjointSet, index: int): int =
  ## Find the set an element is in by calculating the "root" element
  ## of its set
  var p = i
  while p != parent[p]:
    p = parent[p]
  return p

proc join(parent: var DisjointSet; i, j: int): int =
  ## Associate the sets of `i` and `j` together
  parent[parent.root(i)] = parent.root(j)
#+end_src

To encode the problem, we encode our disjoint sets as follows:

1. Create an array of integers ~size(grid) + 1~ long.
2. All entries ~(h, w)~ in the grid are encoded as ~h*width + w~, with the
   initial value for ~sets[h*width + w]~ being ~h*width + w~.
3. For each location ~(h, w)~ in the grid:

   - If the value at ~grid[h][w]~ is too high, it is put into the set
     represented by ~sets[grid.size]~.

   - Otherwise, join the element with all neighbors which are not too high.

At the end, you can then count the number of entries each set has.
